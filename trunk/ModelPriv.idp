//------------------------------------------------------------------------------
// ModelPriv.idp
// $HeadURL: https://www.msec.be/svn/modeling/Projects/ModPrivAndTrustInElecServ/ModelPriv.idp $
//------------------------------------------------------------------------------
// $Rev:: 69                        $:  Revision of the last commit
// $Author:: koen                   $:  Author of last commit
// $Date:: 2012-12-14 11:06:51 +010#$:  Date of last commit
//------------------------------------------------------------------------------

Given:
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  //  Generic part
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  // Authentication technologies : set T 
  type ClaimBasedTech = { 
    X509; Idemix;
  }
  
  type NetworkBasedTech = {
    Public; Filtered; Private;
  }
    
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  //  System specification
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    
  type Stakeholder                        // Stakeholders in the organization
  type User isa Stakeholder               // User in the system : set U
  type Organization isa Stakeholder       // Organizations in the system : set O 
  
  type Service                            // Services in the system : set S
    
  type Attribute                          // Attributes in the system : set A  
  
  type Identifier                         // Identifier set
  type IdentSet isa Identifier            // Identity set : set I
  type PseudoSet isa Identifier           // Pseudonymity set : set N
    
  IdentSet(IdentSet, Attribute)           // Identity set
  PseudoSet(PseudoSet, Attribute)         // Pseudonymity set
  
  //----------------------------------------------------------------------------
  // Credential is defined by three predicates
  //----------------------------------------------------------------------------
  type Credential           // Credential identifiers : credential construction
  
  CredAttr(Credential, Attribute)  
  CredTech(Credential, ClaimBasedTech)
  CredIssuer(Credential, Organization)    // role issuer  
  //----------------------------------------------------------------------------
  
  //----------------------------------------------------------------------------
  //  User trust relations exist of two trust relations
  //----------------------------------------------------------------------------
  StorageTrust(Organization)              //set T_(U,S)
  DistributionTrust(Organization)         //set T_(U,D)
  //----------------------------------------------------------------------------
  
  //----------------------------------------------------------------------------
  // Profiles
  //----------------------------------------------------------------------------  
  type Profile
  
  ProfAttr(Profile, Attribute, Stakeholder) 
  ProfTech(Profile, NetworkBasedTech)
  ProfHost(Profile, Organization)
  ProfRestrictAccess(Profile, Organization)
  //----------------------------------------------------------------------------
  
  //----------------------------------------------------------------------------
  // Service policies
  //----------------------------------------------------------------------------
  type ServPolicy    
  ServPolicy(ServPolicy, Service, Organization)     
  
  ServPolOwn(ServPolicy, Credential, Organization) 
  
  ServPolRevealU(ServPolicy, Attribute)
  ServPolRevealC(ServPolicy, Credential, Attribute)
  ServPolRevealP(ServPolicy, Profile, Attribute, Stakeholder)  
  ServPolRevealO(ServPolicy, Attribute, Stakeholder)  
  
  ServPolStore(ServPolicy, Attribute, Stakeholder)
  
  type ServPolForward
  ServPolForward(ServPolicy, ServPolForward)
  ServPolForward(ServPolForward, Attribute, Stakeholder)  
  ServPolForwardTo(ServPolForward, ServPolicy)
  
  //conditional service policy
  type Condition    
  Condition(Condition, Attribute)  
  ServPolSharing(ServPolicy,ServPolicy,Condition)
  
  ServPolOutputC(ServPolicy, Credential)
  ServPolOutputP(ServPolicy, Profile)  
  //----------------------------------------------------------------------------  
  
  //----------------------------------------------------------------------------  
  // Inferences
  //----------------------------------------------------------------------------  
  type ServGroup
  
  ServGroup(ServGroup, Service, Organization)
  AlternativeGroup(ServGroup, ServGroup)
  
  type Collaboration
  
  Collaboration(Collaboration, Organization)

  type OrgDomain
  OrgDomain(OrgDomain, Organization)
  UserPolRevealNotAllow(OrgDomain, Attribute)
  UserPolRevealNotAllowId(OrgDomain, Identifier)
  ConditionFulfilled(Condition)
  
Declare:
  // Helper predicates trust relations
  //  (1)   : Storage trust in a service policy
  //  (2)   : Distribution trust in a service policy    
  HasStorageTrust(ServPolicy)                     
  HasDistributionTrust(ServPolicy)
  
  // Helper predicates service policies
  //  (1)   : Enabled/disabled service policies
  ServPolCondFulfilled(ServPolicy)
  
  // Service policy specification related predicates
  //  (1)   : Revealed attributes that are not forwarded from somewhere  
  Reveal(ServPolicy, Attribute, Stakeholder) 
  
  //  (1)   : Forwarded attributes that are not forwarded from somewhere
  //  (2)   : Stored attributes that are not forwarded from somewhere
  //  (3)   : Attributes that are stored in profiles that are not forwarded
  //          from somewhere
  //  (4)   : Associates target policies with forward policy, used for
  //          the construction profiles that depends on the (s,o)-path
  Store(ServPolicy, Attribute, Stakeholder)
  StoreIn(ServPolicy, Attribute, Stakeholder, Profile)
  Forward(ServPolForward, Attribute, Stakeholder)
  ForwardTo(ServPolForward, ServPolicy) 
  
  // Paths of service policies
  //  (1)   : Service policy that initiates a service policy chain - path
  //  (2)   : Service policy end point
  //  (3)   : Service policy chain - path, PathOrigin to service policy in chain  
  //  (4)   : Alternative service policy paths
  PathOrigin(ServPolicy)
  PathEnd(ServPolicy)
  Path(ServPolicy, ServPolicy)
  AlterPath(ServPolicy, ServPolicy)
  
  // Profiles
  //  (1)   : Profile related with service policy
  //          ProfileSP( profile owner, path origin, ...)  
  ProfileSP(ServPolicy, ServPolicy, Attribute, Stakeholder)
  
  IdSP(Identifier, ServPolicy, ServPolicy)
  IdProf(Identifier, Profile)
     
  ProfilePath(ServPolicy, Organization, Identifier, Attribute, Stakeholder)
  ProfilePathExcl(ServPolicy, Organization, Identifier, Attribute, Stakeholder)
  
Find:   
  ServOptStored(ServPolicy, Organization, Attribute, Stakeholder)
  ServOptProf(ServPolicy, Organization, Attribute, Stakeholder)    
  ServOptProfN(ServPolicy, Organization, PseudoSet)
  ServOptProfI(ServPolicy, Organization, IdentSet)
  ServOptProfAnon(ServPolicy, Organization)
  ServOptProfAnon(ServPolicy)   
  UserPolViolationReveal(ServPolicy, OrgDomain, Organization, Attribute)
  UserPolViolationRevealId(ServPolicy, OrgDomain, Organization, Identifier)
    
Satisfying:  
  // Helper predicate for storage trust in an organization
  //  (1)   : Each service policy adopts the storage trust of the organization
  {
    HasStorageTrust(sp) <- ? s o : StorageTrust(o) & ServPolicy(sp,s,o).
  }
  
  // Helper predicate for distribution trust in an organization
  //  (1)   : Each service policy adopts the distribution trust of the 
  //          organization
  {
    HasDistributionTrust(sp) <- ? s o : DistributionTrust(o) & 
                                ServPolicy(sp,s,o).
  }  
      
  // Service policiy reveal predicate  
  {    
    // Access control policies - generic part
    //--------------------------------------------------------------------------
    //  (1)   : Reveal user input attributes to service provider
    //  (2)   : Reveal attributes from credential to service provider
    //  (3)   : Reveal attributes from profile to service provider    
    Reveal(sp,a,u) <- User(u) & ServPolRevealU(sp,a).
    Reveal(sp,a,o) <- ? c : ServPolRevealC(sp,c,a) & ServPolOwn(sp,c,o).
    Reveal(sp,a,e) <- ? p : ServPolRevealP(sp,p,a,e).    
    
    // Access control policies - authentication technology specific part
    //--------------------------------------------------------------------------
    // Claim-based technology specific part    
    //  (1)   : X.509 - attribute disclosure when proving certificate ownership
    Reveal(sp,a,o) <- ? c : CredTech(c,X509) & ServPolOwn(sp,c,o) & 
                        CredAttr(c,a).
    
    // Network-based technology specific part    
    //  (1)   : Public profiles : non-selective attribute disclosure to all
    //          organizations
    //  (2)   : Filtered profiles : non-selective attribute disclosure only to
    //          authorized organizations    
    Reveal(sp,a,e) <- ? p a1 e1 : ProfTech(p,Public) & 
                      ServPolRevealP(sp,p,a1,e1) & ProfAttr(p,a,e).                      
    Reveal(sp,a,e) <- ? p a1 e1 : ProfTech(p,Filtered) & 
                      ServPolRevealP(sp,p,a1,e1) & ProfAttr(p,a,e).
    
    // Output policies - technology specific part
    //--------------------------------------------------------------------------
    //  (1)   : Attributes in X.509 certificate are revealed to service provider
    //  (2)   : Attrbiutes in profile are revealed to service provider
    //--------------------------------------------------------------------------
    Reveal(sp,a,o) <- ? c s : ServPolOutputC(sp,c) & CredTech(c,X509) & 
                      ServPolicy(sp,s,o) & CredAttr(c,a).        
    Reveal(sp,a,e) <- ? p : ServPolOutputP(sp,p) & ProfAttr(p,a,e).   
  }
  
  // Service policy store predicate
  //  (1)   : Store specified attributes in profile attached to service policy
  //  (2)   : Store all revealed attributes in profile attached to service
  //          policy in case of no storage trust
  //  (3)   : Store attributes that are forwarded from other policies that
  //          have no distribution trust
  {
    Store(sp,a,e) <- ServPolStore(sp,a,e).
    Store(sp,a,e) <- ~HasStorageTrust(sp) & Reveal(sp,a,e).
    Store(sp,a,e) <- ? fw : ~HasStorageTrust(sp) & Forward(fw,a,e) & ForwardTo(fw,sp).
  }  
  
  // Service policy forward predicate
  //  (1)   : Forward specified attributes
  //  (2)   : Forward all revealed attributes in case of no distribution trust
  {
    Forward(fw,a,e) <- ServPolForward(fw,a,e).
    Forward(fw,a,e) <- ? sp : ~HasDistributionTrust(sp) & 
                       ServPolForward(sp,fw) & Reveal(sp,a,e).
  }
  
  // Service policy forward-to predicate
  //  (1)   : Forward-to data under the scope of the specified service policy
  //  (2)   : Forward-to data in case of no trust in service policies in the 
  //          chain of service policies
  {
    ForwardTo(fw,sp) <- ServPolForwardTo(fw,sp).
    ForwardTo(fw0,sp2) <- ? sp1 fw1 : ~HasDistributionTrust(sp1) & 
                          ForwardTo(fw0,sp1) & 
                          ServPolForward(sp1,fw1) & ServPolForwardTo(fw1,sp2).
  }
  
  // Helper predicates to deduce the origin of a service policy chain
  //  (1)   : The origin of a service policy chain requires no attributes
  //          that are forwarded by an external organization
  {
    PathOrigin(sp) <- ~(? a s : ServPolRevealO(sp,a,s)).
  }
  
  // Helper predicate to deduce the end of a service policy chain
  //  (1)   : the end of a service policy chain has no forward policy part
  {
    PathEnd(sp) <- ~(? fw : ServPolForward(sp,fw)).
  }
  
  // Helper predicates to deduce the single path from a service policy chain's
  // origin to a certain service policy
  //  (1)   : The origin is a path to itself = initial rule
  //  (2)   : Path between the origin and an adjecent service policy
  //          = initial rule
  //  (3)   : Path between the origin and an non-adjecent service policy
  //          = inductive rule
  {
    Path(sp0,sp0) <- PathOrigin(sp0).
    Path(sp0,sp1) <- ? fw0 : PathOrigin(sp0) & ServPolForward(sp0,fw0) & 
                     ForwardTo(fw0,sp1).
    Path(sp0,sp2) <- ? sp1 fw1 : Path(sp0,sp1) & ServPolForward(sp1,fw1) & 
                     ForwardTo(fw1,sp2).
  }  
  
  // Helper predicate to deduce alternative paths, these are:
  //  (1)   : Service policies from the same organization that have an identic
  //          service identifier are alternatives.
  //  (2)   : Service policies from service groups that are specified as
  //          alternatives
  //  (3)   : Cummutative rule because rule (2) is not commutative because of 
  //          the AlternativeGroup-relation that is not commutative.
  {    
    AlterPath(sp0,spa) <- ? s o : PathOrigin(spa) & PathOrigin(sp0) & 
                          spa ~= sp0 &
                          ServPolicy(sp0,s,o) & ServPolicy(spa,s,o).
    AlterPath(sp0,spa) <- ? sg0 sga s0 sa o0 oa : PathOrigin(sp0) & 
                          PathOrigin(spa) &
                          AlternativeGroup(sg0,sga) & 
                          ServGroup(sg0,s0,o0) & ServGroup(sga,sa,oa) &
                          ServPolicy(sp0,s0,o0) & ServPolicy(spa,sa,oa).
    AlterPath(spa,sp0) <- AlterPath(sp0,spa).
  }
  
  // Profile linked to a service policy.  Path between service policy (sp) and
  // chain origin (sp0) is unique. Full profile depends the service policy path.
  // Profiles are constructed from the following two rules: 
  //  (1)   : Attributes that are stored are added to the profile
  //  (2)   : Attributes that are forwarded by preceding service policies are
  //          added to the profile too when there no storage trust
  {
    ProfileSP(sp,sp0,a,e) <- Path(sp0,sp) & Store(sp,a,e).
    ProfileSP(sp,sp0,a,e) <- ? sp1 fw1 : ~HasStorageTrust(sp) & Path(sp0,sp) & 
                             ServPolForward(sp1,fw1) & ForwardTo(fw1,sp) & 
                             Forward(fw1,a,e).
  } 
  
  // Linkable services associated with service policy path
  {
    IdSP(n,sp,sp0) <- Path(sp0,sp) & PseudoSet(n) &
                      ~(? a : PseudoSet(n,a) & 
                      ~(? e : ProfileSP(sp,sp0,a,e))).
    IdSP(i,sp,sp0) <- Path(sp0,sp) & IdentSet(i) &
                      ~(? a : IdentSet(i,a) & 
                      ~(? e : ProfileSP(sp,sp0,a,e))).
  }
  
  // Linkable profiles
  {
    IdProf(n,p) <- PseudoSet(n) & ~(? a : PseudoSet(n,a) & 
                   ~(? e : ProfAttr(p,a,e))).
    IdProf(i,p) <- IdentSet(i) & ~(? a : IdentSet(i,a) & 
                   ~(? e : ProfAttr(p,a,e))).
  }
  
  // Deduction of impact of a service policy path on the profiles of
  // organizations
  //  (1)   : Organizations group data associated with a pseudonymous set
  //          -optimalization: Path(sp0,sp) removed --> part of IdSP
  //  (2)   : Collaborating organizations put their profiles togheter
  //  (3)   : Recursive step : newly added attributes possibly compose new
  //          pseudonyms
  //  (4)   : Recursive step : newly added attributes possibly compose new
  //          identities
  //  (5)   : Sharing attributes between different service policies
  {
    ProfilePath(sp0,o,id,a,e) <- ? sp s : ProfileSP(sp,sp0,a,e) &
                                 ServPolicy(sp,s,o) & IdSP(id,sp,sp0).
    ProfilePath(sp0,o,id,a,e) <- ? col o1 : 
                                 Collaboration(col,o) & Collaboration(col,o1) &
                                 ProfilePath(sp0,o1,id,a,e).
    ProfilePath(sp0,o,n,a,e) <- ? id : PseudoSet(n) & 
                                ProfilePath(sp0,o,id,a,e) &
                                ~(? a1 : PseudoSet(n,a1) & ~(? e1 : 
                                ProfilePath(sp0,o,id,a1,e1))).
    ProfilePath(sp0,o,i,a,e) <- ? id : IdentSet(i) & 
                                ProfilePath(sp0,o,id,a,e) &
                                ~(? a1 : IdentSet(i,a1) & ~(? e1 : 
                                ProfilePath(sp0,o,id,a1,e1))). 
    ProfilePath(sp0,o,id,a,e) <- ? cond s0 sp1 o1 : ConditionFulfilled(cond) &
                                ServPolicy(sp0,s0,o) &
                                ServPolSharing(sp1,sp0,cond) &                                
                                ProfilePath(sp1,o1,id,a,e).                              
  }
  
  // Deduction of impact of all paths to the profiles of organizations exclusive
  // the impact of the considered path
  //  (1)   : Organizations group data associated with a pseudonymous set
  //          exclude all alternative path to the associated path  
  //  (2)   : Collaborating organizations put their profiles togheter
  //          -optimalization: Path(sp1,sp) removed --> part of IdSP
  //  (3)   : Recursive step --> profiles of different service policies that 
  //          have a shared identifier possibly compose new pseudonyms.
  //  (4)   : Recursive step --> profiles of different service policies that 
  //          have a shared identifier possibly compose new identities.
  //  (5)   : Attributes in a profile that can be linked to a service policy
  //          profile are always visible to the profile host  
  //----------------------------------------------------------------------------
  //  Technology dependant
  //----------------------------------------------------------------------------
  //  (1)   : Attributes in profiles are visible to profile host (must have co
  //  (2)   : Attributes in profiles are visible to everyone
  //  (3)   : Attributes in controlled access profiles are visible only to
  //          authorized organizations  
  {  
    ProfilePathExcl(sp0,o,id,a,e) <- ? sp sp1 sp2 s s2: 
                                     Path(sp0,sp2) & ServPolicy(sp2,s2,o) &
                                     ServPolicy(sp,s,o) &
                                     IdSP(id,sp,sp1) & ProfileSP(sp,sp1,a,e) &
                                     ~AlterPath(sp1,sp0) & ~(sp0 = sp1).                                     
    ProfilePathExcl(sp0,o,id,a,e) <- ? col o1 sp sp1 s : PathOrigin(sp0) &                                 
                                     Collaboration(col,o) & 
                                     Collaboration(col,o1) &
                                     ServPolicy(sp,s,o1) &
                                     IdSP(id,sp,sp1) & ProfileSP(sp,sp1,a,e) &
                                     ~AlterPath(sp1,sp0) & ~(sp0 = sp1).                                 
    ProfilePathExcl(sp0,o,id,a,e) <- ? col o1 : 
                                     Collaboration(col,o) & 
                                     Collaboration(col,o1) &
                                     ProfilePathExcl(sp0,o1,id,a,e).
    ProfilePathExcl(sp0,o,n,a,e) <- ? id : PseudoSet(n) & 
                                    ProfilePathExcl(sp0,o,id,a,e) & 
                                    ~(? a1 : PseudoSet(n,a1) & ~(? e1 : 
                                    ProfilePathExcl(sp0,o,id,a1,e1))).
    ProfilePathExcl(sp0,o,i,a,e) <- ? id : IdentSet(i) &
                                    ProfilePathExcl(sp0,o,id,a,e) & 
                                    ~(? a1 : IdentSet(i,a1) & ~(? e1 : 
                                    ProfilePathExcl(sp0,o,id,a1,e1))).    
    ProfilePathExcl(sp0,o,id,a,e) <- ? cond sp1 sp2 o1 s0 s1 : 
                                    ConditionFulfilled(cond) & 
                                    ServPolicy(sp0,s0,o) &
                                    ServPolicy(sp1,s1,o) &
                                    ServPolSharing(sp2,sp1,cond) &
                                    ProfilePathExcl(sp2,o1,id,a,e).                                

    //--------------------------------------------------------------------------
    //  Technology dependant properties
    //--------------------------------------------------------------------------
    ProfilePathExcl(sp0,o,id,a,e) <- ? sp s p: Path(sp0,sp) & 
                                     ServPolicy(sp,s,o) & 
                                     ProfHost(p,o) & IdProf(id,p) & 
                                     ProfAttr(p,a,e).                
    ProfilePathExcl(sp0,o,id,a,e) <- ? sp s p : ProfTech(p,Public) & 
                                     Path(sp0,sp) & ServPolicy(sp,s,o) & 
                                     IdProf(id,p) & ProfAttr(p,a,e).
    ProfilePathExcl(sp0,o,id,a,e) <- ? sp s p : ProfTech(p,Filtered) & 
                                     Path(sp0,sp) & ServPolicy(sp,s,o) &
                                     ProfRestrictAccess(p,o) &
                                     IdProf(id,p) & ProfAttr(p,a,e).
  }     
  
  // Deduction of the attributes related with the selected service option 
  // that are directly stored
  {
    ServOptStored(sp0,o,a,e) <- ? id : ProfilePath(sp0,o,id,a,e).
  }
  
  // Deduction of the impact of the selected service policy path on the
  // exclusive set
  //  (1)   : Attributes from the path profile
  //  (2)   : All attributes that is pseudonymous under pseudonyms related to 
  //          the selected service policy becomes linkable -> members of one set
  //  (3)   : Recursive step -> newly added attributes possibly compose new
  //          pseudonyms
  {
    ServOptProf(sp0,o,a,e) <- ? id : ProfilePath(sp0,o,id,a,e).
    ServOptProf(sp0,o,a,e) <- ? id a0 e0 : ProfilePath(sp0,o,id,a0,e0) &
                              ProfilePathExcl(sp0,o,id,a,e).
    ServOptProf(sp0,o,a,e) <- ? n : PseudoSet(n) & 
                              ProfilePathExcl(sp0,o,n,a,e) &
                              ~(? a1 : PseudoSet(n,a1) & 
                              ~(? e1 : ServOptProf(sp0,o,a1,e1))).
    ServOptProf(sp0,o,a,e) <- ? i : IdentSet(i) & 
                              ProfilePathExcl(sp0,o,i,a,e) &                               
                              (~? a1 : IdentSet(i,a1) & 
                              ~(? e1 : ServOptProf(sp0,o,a1,e1))).                       
  }  
  
  // Deduction of pseudonyms that are linked with the selected service policy
  //  (1)   : Pseudonym sets are subsets of the ServOptProf set
  {
    ServOptProfN(sp0,o,n) <- PseudoSet(n) & 
                             ~(? a : PseudoSet(n,a) & 
                             ~(? e : ServOptProf(sp0,o,a,e))).
  }
  
  // Deduction of pseudonyms that are linked with the selected service policy
  //  (1)   : Identity sets are subsets of the ServOptProf set
  {
    ServOptProfI(sp0,o,i) <- IdentSet(i) &
                             ~(? a : IdentSet(i,a) & 
                             ~(? e : ServOptProf(sp0,o,a,e))).
  }
  
  {
    UserPolViolationReveal(sp,d,o,a) <- ? e : ServOptProf(sp,o,a,e) & 
                                     OrgDomain(d,o) &
                                     UserPolRevealNotAllow(d,a).
  }
  
  {
    ServOptProfAnon(sp0,o) <- ! id : PathOrigin(sp0) & ~ServOptProfN(sp0,o,id) & 
                              ~ServOptProfI(sp0,o,id).
  }
  
  {
    ServOptProfAnon(sp0) <- ! o : ServOptProfAnon(sp0,o).
  }
  
  {
    UserPolViolationRevealId(sp,d,o,n) <- ServOptProfN(sp,o,n) & 
                                          OrgDomain(d,o) &
                                          UserPolRevealNotAllowId(d,n).
    UserPolViolationRevealId(sp,d,o,i) <- ServOptProfI(sp,o,i) & 
                                          OrgDomain(d,o) &
                                          UserPolRevealNotAllowId(d,i).
  }