/**
 * Title:  Infer privacy in advanced electronic services.
 * 
 * Author: koen.dec...@gmail.com
 */
 
/**
 *      Theory
 */ 
 
 
 /**
  * Notes:
  *   (1) : This is the realization of the inference presented in ------
  *   (2) : In the paper only attributes are part of a profile.  However, more
  *         precise conclusions are possible when assigned a stakeholder to
  *         each attribute that asserts this attribute.  For instance, a user 
  *         enters his name in an input text field on a site.  In this case, 
  *         the user asserts the name.  Another example is a user that reveals 
  *         the name on his identity card.  The government asserts the user's 
  *         name because this card is issued by it.  This realization extends
  *         profiles with these stakeholders.  It allows to estimate whether
  *         attributes that are part of a user profile are trustworthy or not.
  *         For instance, ones name asserted by the government is more 
  *         trustworthy than the user's name asserted by the user himself.
  */ 

theory TheoryBasicInference : VocPrivAndTrust {
  
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  // Theory : behavior
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  
  // Storage trust of a user for a service instance is derived from the storage
  // trust in the organization that hosts the service instance.
  {
    ! si : StorageTrustServInstance(si) <- ? o st : StorageTrust(o) & Service(si,st,o).
  }
  
  // Distribution trust of a user for a service instance is derived from the 
  // distribution trust in the organization that hosts the service instance.
  {
    ! si : DistributionTrustServInstance(si) <- ? o st : DistributionTrust(o) & 
                                         Service(si,st,o).
  }  
  
  // Attributes that are generated by a service instance are revealed to it.
  {
    ! si a e : GeneratedByService(si,a,e) <- ? ap sp dp op s :
                                      ServicePolicies(si,ap,sp,dp,op) &
                                      GenerateAttr(ap,a) &
                                      Service(si,s,e).
  } 
  
  // The attributes that are revealed to the service instance.
  {
    // Service policy dependent part
    //  (1)   : Reveal the attributes that are specified in the access control
    //          policy
    //  (2)   : When proving a property, the property itself is revealed
    //  (3)   : Attributes that are generated by the service instance are 
    //          revealed
    ! si a e : RevealedToService(si,a,e) <- ? ap sp dp op as : 
                                      ServicePolicies(si,ap,sp,dp,op) &
                                      RevealAttr(ap,as,a,e).
    
    ! si prop e : RevealedToService(si,prop,e) <- ? ap sp dp op as a :
                                      ServicePolicies(si,ap,sp,dp,op) &
                                      ProveProperty(ap,prop,as,a,e).                                      
   
    ! si a e : RevealedToService(si,a,e) <- GeneratedByService(si,a,e).
    
    // Technology dependent part
    //  (1)   : X509 - when proving a property, the required attributes are also
    //                 revealed
    //  (2)   : X509 - all attributes are revealed when using a X509 
    //                 certificate
    //  (3)   : X509 - when proving a property, all attributes of the 
    //                 certificate are revealed                              
    //  (4)   : X509 - all attributes are revealed when proving ownership
    //                 of a X509 certificate
    ! si a e : RevealedToService(si,a,e) <- ? ap sp dp op as prop : 
                                      Credential(as) & CredTech(as,X509Tech) &                                      
                                      ServicePolicies(si,ap,sp,dp,op) &
                                      ProveProperty(ap,prop,as,a,e).
    
    ! si a e : RevealedToService(si,a,e) <- ? ap sp dp op as a_0 e_0 :
                                      Credential(as) & CredTech(as,X509Tech) &
                                      ServicePolicies(si,ap,sp,dp,op) &
                                      RevealAttr(ap,as,a_0,e_0) &                                      
                                      CredAttr(as,a) & CredIssuer(as,e).
                                      
    ! si a e : RevealedToService(si,a,e) <- ? ap sp dp op as prop 
                                      a_0 e_0 :
                                      Credential(as) & CredTech(as,X509Tech) &
                                      ServicePolicies(si,ap,sp,dp,op) &
                                      ProveProperty(ap,prop,as,a_0,e_0) &                                                                        
                                      CredAttr(as,a) & CredIssuer(as,e).
                                      
    ! si a e : RevealedToService(si,a,e) <- ? ap sp dp op at :                                      
                                      ServicePolicies(si,ap,sp,dp,op) &
                                      OwnAuthToken(ap,at) & 
                                      CredAttr(at,a) & CredIssuer(at,e).                               
  }  
  
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  // Theory : inference
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    
  
  // A service instance (arg 2) is a successor of another service 
  // instance (arg 1) when the latter directly invokes the former.  This is
  // derived from the distribution policy that is assigned to the latter.
  // Possibly, multiple successors exist (i.e. all successors are concurrent).
  {
    ! si succ : Successor(si,succ) <- ? ap sp dp op a e : 
                            ServicePolicies(si,ap,sp,dp,op) &
                            DistrAttrTo(dp,succ,a,e).
  }
  
  // A user invokable service is no successor of any other service instance.
  {
    ! si : ServiceInvokedByUser(si) <- ~(? pred : Successor(pred,si)).
  }   
  
  // Service instance invocations propagate from one to another.
  //  (1)   : A service instance (arg 2) invokes its successors (arg 1).
  //  (2)   : A service instance (arg 2) invokes indirectly other 
  //          service instances (arg 1) = transitivity
  {
    ! succ si : ServiceInvokedBy(succ,si) <- Successor(si,succ).
    ! si_2 si_0 : ServiceInvokedBy(si_2,si_0) <- ? si_1 : 
                                        ServiceInvokedBy(si_1,si_0) &
                                        ServiceInvokedBy(si_2,si_1).
  }  
  
  // Attributes that must be stored by a service instance as specified in the
  // assigned storage policy.
  {
    ! si a e : ServiceStoredPolicyAttr(si,a,e) <- ? ap sp dp op :
                                        ServicePolicies(si,ap,sp,dp,op) &
                                        StoreAttr(sp,a,e).
  }  
  
  // All attributes that are revealed by the user to the service instance are 
  // stored under the assumption that there is no storage trust in the
  // organization that hosts this service instance. 
  {
    ! si a e : ServiceStoredRevealAttr(si,a,e) <- RevealedToService(si,a,e).                                      
  }
  
  // Attributes that are forwarded by a service instance (arg1) to a service
  // instance (arg 2) that is directly invoked by it.
  //    (1)   : Forward attributes that are specified in the distribution 
  //            policy
  //    (2)   : Forward all revealed attributes When there is no distribution 
  //            trust in the organization that hosts the service instance
  {    
    ! si succ a e : ForwardedByServiceToSucc(si,succ,a,e) <- ? ap sp dp op :
                                        DistributionTrustServInstance(si) &
                                        ServicePolicies(si,ap,sp,dp,op) &
                                        DistrAttrTo(dp,succ,a,e).
                                        
    ! si succ a e : ForwardedByServiceToSucc(si,succ,a,e) <- ? ap sp dp op ax ex :
                                        ~DistributionTrustServInstance(si) &
                                        ServicePolicies(si,ap,sp,dp,op) &
                                        DistrAttrTo(dp,succ,ax,ex) &
                                        RevealedToService(si,a,e).
  }
  
  // Path where services between (start) and (end) have no distribution trust  
  {
    ! start end : UntrustedPath(start,end) <- ServiceInvokedBy(end,start) &                                                                    
                                    ~(? si_x : ServiceInvokedBy(si_x,start) &
                                        ServiceInvokedBy(end,si_x) &
                                        DistributionTrustServInstance(si_x)).
  }
  
  // All attributes that are forwarded to a service instance (arg 1) by other
  // preceding service instance caused by a user invoked service (arg 2) are
  // stored under the assumption that there is no storage trust in the
  // organization that hosts this service instance (arg 1)
  //  (1)   : when service instance (arg 1) is successor of a user invoked
  //          service  
  //  (2)   : when service instance (arg 1) is successor of source
  //  (3)   : in case of the user invoked service is the source of attributes
  //  (4)   : in case other services in the path are the source of attributes
  {
    ! si su a e : ServiceStoredForwardAttr(si,su,a,e) <-
                                   ServiceInvokedByUser(su) &
                                   ForwardedByServiceToSucc(su,si,a,e).
                                       
    ! si su a e : ServiceStoredForwardAttr(si,su,a,e) <- ? src :
                                   ServiceInvokedByUser(su) &
                                   ServiceInvokedBy(src,su) &
                                   ForwardedByServiceToSucc(src,si,a,e).
                                   
    ! si su a e : ServiceStoredForwardAttr(si,su,a,e) <- ? succ : 
                                   ServiceInvokedByUser(su) &
                                   UntrustedPath(su,si) &
                                   ServiceInvokedBy(si,succ) &
                                   ForwardedByServiceToSucc(su,succ,a,e).
                                    
    ! si su a e : ServiceStoredForwardAttr(si,su,a,e) <- ? src succ :
                                   ServiceInvokedByUser(su) &
                                   UntrustedPath(src,si) & 
                                   ServiceInvokedBy(src,su) &
                                   ServiceInvokedBy(si,succ) &
                                   ForwardedByServiceToSucc(src,succ,a,e).
  }

  // Store all attributes in the sub profile that are the causation of the
  // service instance (arg 1) invoked (directly or indirectly) by a user
  // invoked service (arg 2).  Three attributes sources exist, namely
  //  (1)   : attributes specified in the storage policy of a 
  //          user invoked service 
  //  (2)   : attributes revealed by the user (if no storage trust) of a user
  //          invoked service
  //  (3)   : attributes specified in the storage policy
  //  (4)   : attributes revealed by the user (if no storage trust)
  //  (5)   : attributes forwarded by preceding service instance (if no storage
  //          trust).
  {
    ! su a e :    SubProfile(su,su,a,e) <- ServiceInvokedByUser(su) &
                             ServiceStoredPolicyAttr(su,a,e).
    ! su a e :    SubProfile(su,su,a,e) <- ~StorageTrustServInstance(su) &
                             ServiceInvokedByUser(su) &
                             ServiceStoredRevealAttr(su,a,e).                                                     
    ! si su a e : SubProfile(si,su,a,e) <- ServiceInvokedByUser(su) &                             
                             ServiceInvokedBy(si,su) &
                             ServiceStoredPolicyAttr(si,a,e).
    ! si su a e : SubProfile(si,su,a,e) <- ~StorageTrustServInstance(si) &
                             ServiceInvokedByUser(su) &
                             ServiceInvokedBy(si,su) &
                             ServiceStoredRevealAttr(si,a,e).
    ! si su a e : SubProfile(si,su,a,e) <- ServiceInvokedByUser(su) &
                             ServiceInvokedByUser(su) &
                             ServiceInvokedBy(si,su) &
                             ServiceStoredForwardAttr(si,su,a,e).
  }
  
  // Merging sub profiles to user profiles kept by organization (arg 1) linked
  // to an identifier (arg 2) that are the causation of a user invoked service
  // (arg 3).
  //  (1)   : User profiles are constructed by sub profiles
  //  (2)   : Merged user profiles can be linked to newly formed identifiers
  //          that were partially present in different sub profiles.
  {
    ! o id su a e  : UserProfile(o,id,su,a,e) <- ? si s :
                               SubProfile(si,su,a,e) &
                               Service(si,s,o) &
                               ~(? a_x : IdentifierSetAttr(id,a_x) & 
                               ~(? e_x : SubProfile(si,su,a_x,e_x))).
    ! o id su a e : UserProfile(o,id,su,a,e) <-  ? id_x :                           
                               UserProfile(o,id_x,su,a,e) &
                               ~(? a_x : IdentifierSetAttr(id,a_x) & 
                               ~(? e_x : UserProfile(o,id_x,su,a_x,e_x))).
  }
}