//------------------------------------------------------------------------------
// ModelPriv.idp
// $HeadURL: https://www.msec.be/svn/modeling/Projects/ModPrivAndTrustInElecServ/ModelPriv.idp $
//------------------------------------------------------------------------------
// $Rev:: 79                        $:  Revision of the last commit
// $Author:: koen                   $:  Author of last commit
// $Date:: 2013-01-15 13:24:33 +010#$:  Date of last commit
//------------------------------------------------------------------------------

// Note: some aspects are not included in this version for simplicity.  Only the
//       main aspects that are referenced in the paper are included
//        - collaborations (symmetric and asymmetric) are not included
//        - no user defined policies
//        - no verification of user defined policies

Given:
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  //  Generic part
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  // Authentication technologies : set T 
  type ClaimBasedTech = { 
    X509; Idemix;
  }
  
  type NetworkBasedTech = {
    Public; RestrictedAccess; Private;
  }  
    
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  //  System specification
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    
  type AttrSrc  
  
  type Stakeholder isa AttrSrc         // Stakeholders in the organization
  type User isa Stakeholder               // User in the system : set U
  type Organization isa Stakeholder       // Organizations in the system : set O 
  
  //----------------------------------------------------------------------------
  //  User trust relations: two trust relations
  //----------------------------------------------------------------------------
  StorageTrust(Organization)              //set T_(U,S)
  DistributionTrust(Organization)         //set T_(U,D)
  //----------------------------------------------------------------------------
  
  //----------------------------------------------------------------------------
  // Attributes, identity set and pseudonymous set
  //----------------------------------------------------------------------------      
  type Attribute                          // Attributes in the system : set A  
  
  type Identifier                         // Identifier set
  type IdentSet isa Identifier            // Identity set : set I
  type PseudoSet isa Identifier           // Pseudonymity set : set N
    
  IdentSetAttr(IdentSet, Attribute)       // Attr member of the Identity set
  PseudoSetAttr(PseudoSet, Attribute)     // Attr member of the Pseudonymity set    
  
  //----------------------------------------------------------------------------
  // Claim-based authentication technologies
  //----------------------------------------------------------------------------
  type Credential isa AttrSrc          // Credential references
  
  CredAttr(Credential, Attribute)         // attribute of credential  
  CredTech(Credential, ClaimBasedTech)    // technology of credential
  CredIssuer(Credential, Organization)    // organization that issues credential
  //----------------------------------------------------------------------------
  
  //----------------------------------------------------------------------------
  // Network-based authentication technologies
  //----------------------------------------------------------------------------  
  type Profile isa AttrSrc                 // Profile references
  
  ProfAttr(Profile, Attribute, Stakeholder)   // (attr,stake) in profile
  ProfTech(Profile, NetworkBasedTech)         // Profile technology
  ProfHost(Profile, Organization)             // Organization that host profile
  ProfAccess(Profile, Organization)           // Access control on profile
  //----------------------------------------------------------------------------
  
  //----------------------------------------------------------------------------
  // Service policies
  //----------------------------------------------------------------------------  
  type Service                            // Services in the system : set S
  
  type ServPolicy isa AttrSrc 
  
  // Service Policy relates to exactly one tuple <service,organization> 
  // (= Sigma)
  ServPolicySO(ServPolicy, Service, Organization)   
  
  // Access control policy
  // Proof credential ownership, credential issued by an organization
  ServPolOwn(ServPolicy, Credential, Organization)     
  
  // Reveal attributes from an attribute source asserted by a stakeholder
  // E.g., Stakeholder of attributes from user input is the 'User'
  ServPolReveal(ServPolicy, AttrSrc, Attribute, Stakeholder)
    
  // Storage policy
  ServPolStore(ServPolicy, Attribute, Stakeholder)
  
  // Distribution policy
  type ServPolDist
  
  // Each ServPolDist reference belongs to one service policy and 
  // possibly multiple destination service policies
  ServPolDistFromTo(ServPolDist, ServPolicy, ServPolicy)
  ServPolDistFwAttr(ServPolDist, Attribute, Stakeholder) 
  
  // Output policy
  ServPolOutputC(ServPolicy, Credential)
  ServPolOutputP(ServPolicy, Profile)  
  
  //----------------------------------------------------------------------------
  // Behavioral aspects related to service policies
  //----------------------------------------------------------------------------
    
  // Service Policies that are enabled after a previous service policy.  This
  // allows to express an order for service policies
  // e.g., services are enabled after a user registers to it.
  ServPolEnabledBy(ServPolicy,ServPolicy)  
  
  // Service Policy purpose determines the alternative policies
  type Purpose
  PurposeSP(Purpose,ServPolicy)
  
  // Some service policies with a shared purpose are only executed once.  E.g.,
  // a registration service
  OneTimePurpose(Purpose)
  
  // Collaboration between organizations (asymmetric collaboration relation)
  type Collaboration
  CollaborationOrg(Collaboration, Organization)
  
Declare:
  HasStorageTrust(ServPolicy)
  HasDistributionTrust(ServPolicy)   
  
  InfoFlowOrigin(ServPolicy)  
  InfoFlowTo(ServPolicy, ServPolicy)
  InfoFlowNext(ServPolicy, ServPolicy, ServPolicy)
  InfoFlowSeq(ServPolicy, ServPolicy, ServPolicy)
  InfoFlowAlter(ServPolicy, ServPolicy) 
  InfoFlowCompl(ServPolicy, ServPolicy)  
  HistorySP(ServPolicy,ServPolicy)
  
  RevealACAttr(ServPolicy, Attribute, Stakeholder)  
  StoreAttr(ServPolicy, Attribute, Stakeholder)
  DistAttr(ServPolicy, ServPolicy, Attribute, Stakeholder)
  DistFromTo(ServPolicy, ServPolicy, ServPolicy)
  
  RevealDistAttr(ServPolicy, ServPolicy, Attribute, Stakeholder)
  InfoFlowStoreAttr(ServPolicy, Organization, Attribute, Stakeholder)
  InfoFlowStoreId(ServPolicy, Organization, Identifier)
  HistoryStoreAttr(ServPolicy, ServPolicy, Organization, Attribute, Stakeholder)
  
  //ProfileHistory(ServPolicy, Organization, Identifier, Attribute, Stakeholder)
  //ProfileInfoFlow(ServPolicy, Organization, Identifier, Attribute, Stakeholder)
  //ProfileService(ServPolicy, Organization, Identifier, Attribute, Stakeholder)

Find:
  //InfoFlowTo(ServPolicy, ServPolicy)
  //InfoFlowNext(ServPolicy, ServPolicy, ServPolicy)
  //InfoFlowAlter(ServPolicy, ServPolicy)
  //InfoFlowCompl(ServPolicy, ServPolicy)    
  //HistorySP(ServPolicy,ServPolicy)  
  
  //RevealACAttr(ServPolicy, Attribute, Stakeholder)
  //StoreAttr(ServPolicy, Attribute, Stakeholder)
  //DistAttr(ServPolicy, ServPolicy, Attribute, Stakeholder)
  //DistFromTo(ServPolicy, ServPolicy, ServPolicy)
  
  //RevealDistAttr(ServPolicy, ServPolicy, Attribute, Stakeholder)
  //InfoFlowStoreAttr(ServPolicy, Organization, Attribute, Stakeholder)
  //InfoFlowStoreId(ServPolicy, Organization, Identifier)
  //HistoryStoreAttr(ServPolicy, ServPolicy, Organization, Attribute, Stakeholder)
  
  ProfileHistory(ServPolicy, Organization, Identifier, Attribute, Stakeholder)
  ProfileInfoFlow(ServPolicy, Organization, Identifier, Attribute, Stakeholder)
  ProfileService(ServPolicy, Organization, Identifier, Attribute, Stakeholder)
  MergedProfilesOrg(ServPolicy, Organization, Identifier, 
                    Attribute, Stakeholder)
  
Satisfying:
  // Helper predicate for storage trust in an organization
  //  (1)   : Each service policy adopts the storage trust of the organization
  {
    HasStorageTrust(sp) <- ? s o : StorageTrust(o) & ServPolicySO(sp,s,o).
  }
  
  // Helper predicate for distribution trust in a service policy
  //  (1)   : Each service policy adopts the distribution trust of the 
  //          organization
  {
    HasDistributionTrust(sp) <- ? s o : DistributionTrust(o) & 
                                ServPolicySO(sp,s,o).
  }  
  
  // Determine the origin of the info-flow
  //  (1)   : The origin service policy has no input from external organizations
  {
    InfoFlowOrigin(sp) <- ~(? o a e : Organization(o) & 
                          ServPolReveal(sp,o,a,e)).
  }  
  
  // Determine all the service policies that are part of the info-flow that
  // is referenced by the origin of the info-flow.
  //  (1)   : initial step: the origin is an info-flow to itself
  //  (2)   : initial step: the info-flow between the origin and an adjecent 
  //                        service policy
  //  (3)   : inductive step : the info-flow between the origin and an 
  //                           non-adjecent service policy
  {
    InfoFlowTo(sp0,sp0) <- InfoFlowOrigin(sp0).
    InfoFlowTo(sp0,sp1) <- ? fw0 : InfoFlowOrigin(sp0) & 
                           ServPolDistFromTo(fw0,sp0,sp1).
    InfoFlowTo(sp0,sp2) <- ? sp1 fw1 : InfoFlowTo(sp0,sp1) & 
                            ServPolDistFromTo(fw1,sp1,sp2).
  }
  
  // Determine service policy sequences within an info-flow
  //  (1)   : initial step
  //  (2)   : inductive step
  {    
    InfoFlowNext(sp0,sp1,sp2) <- ? fw1 : InfoFlowTo(sp0,sp1) & 
                                ServPolDistFromTo(fw1,sp1,sp2).
  }
  
  {
    InfoFlowSeq(sp0,sp1,sp2) <- InfoFlowNext(sp0,sp1,sp2).
    InfoFlowSeq(sp0,sp1,sp3) <- ? sp2 : InfoFlowSeq(sp0,sp1,sp2) & 
                                InfoFlowNext(sp0,sp2,sp3).
  }
  
  // Determine service policies that are alternative info-flows
  //  (1)   : Service policies that are origin with the same purpose are
  //          each others alternative.
  {
    InfoFlowAlter(sp0,spa) <- ? p : sp0 ~= spa &
                              InfoFlowOrigin(sp0) & InfoFlowOrigin(spa) &
                              PurposeSP(p,sp0) & PurposeSP(p,spa).             
  }
  
  // Determine service policies that are complementary info-flows
  {
    InfoFlowCompl(sp0,spa) <- sp0 ~= spa &
                              InfoFlowOrigin(sp0) & InfoFlowOrigin(spa) &
                              ~InfoFlowAlter(sp0,spa).                              
  }  
  
  // The history for each referenced service policy
  //  (1)   : initial step : all complementary service policies that are member
  //                         of an info-flow that is not enabled by another 
  //                         service policy
  //  (2)   : inductive step : service policies that are enabled by service
  //                           policies of the history
  {
    HistorySP(sp0,sp) <- ? sp1 : InfoFlowCompl(sp0,sp1) & InfoFlowTo(sp1,sp) & 
                         ~(? spx : ServPolEnabledBy(sp1,spx)).
    HistorySP(sp0,sp) <- ? spH : HistorySP(sp0,spH) & InfoFlowTo(spH,sp) &
                         ServPolEnabledBy(sp,spH).
  }
  
  // Determine the revealed attributes specified on the access control section
  // in the service policies
  {    
    // Access control policies - generic part
    //--------------------------------------------------------------------------
    //  (1)   : Reveal user input attributes that are specified in service pol
    //  (2)   : Reveal credential attributes that are specified in service pol
    //  (3)   : Reveal profile attributes that are specified in service pol
    //  (4)   : Reveal attributes generated by the host that are specified
    RevealACAttr(sp,a,e) <- ? u : ServPolReveal(sp,u,a,e) & e = u.    
    RevealACAttr(sp,a,o) <- ? c : Credential(c) & ServPolOwn(sp,c,o) & 
                             ServPolReveal(sp,c,a,o).
    RevealACAttr(sp,a,e) <- ? p : Profile(p) & ServPolReveal(sp,p,a,e).
    RevealACAttr(sp,a,e) <- ? o : Organization(o) & ServPolReveal(sp,o,a,e).
    RevealACAttr(sp,a,o) <- ? sp1 s1 : ServPolicySO(sp1,s1,o) & 
                              ServPolReveal(sp,sp1,a,o) & sp = sp1.
    
    // Access control policies - authentication technology specific part
    //--------------------------------------------------------------------------
    // Claim-based technology specific part    
    //  (1)   : X.509 - reveal all credential attributes of required X509 cert
    RevealACAttr(sp,a,o) <- ? c : CredTech(c,X509) & ServPolOwn(sp,c,o) & 
                             CredAttr(c,a).
    
    // Network-based technology specific part    
    //  (1)   : Public profiles : non-selective attribute disclosure to all
    //          organizations
    //  (2)   : RestrictedAccess profiles : non-selective attribute disclosure 
    //          to authorized organizations
    //  (3)   : Private profile : non-selective attribute disclosure to 
    //          profile's host
    RevealACAttr(sp,a,e) <- ? p a1 e1 : ProfTech(p,Public) & 
                             ServPolReveal(sp,p,a1,e1) & ProfAttr(p,a,e).
                             
    RevealACAttr(sp,a,e) <- ? s o p a1 e1 : ProfTech(p,RestrictedAccess) & 
                            ServPolReveal(sp,p,a1,e1) & ProfAttr(p,a,e) & 
                            ProfAccess(p,o) & ServPolicySO(sp,s,o).
                            
    RevealACAttr(sp,a,e) <- ? s o p a1 e1 : ProfTech(p,Private) & 
                            ServPolReveal(sp,p,a1,e1) & ProfAttr(p,a,e) & 
                            ProfHost(p,o) & ServPolicySO(sp,s,o).
    
    // Output policies - technology specific part
    //--------------------------------------------------------------------------
    //  (1)   : Attributes in X.509 certificate are revealed to service provider
    //  (2)   : Attrbiutes in profile are revealed to service provider
    //--------------------------------------------------------------------------
    RevealACAttr(sp,a,o) <- ? c s : ServPolOutputC(sp,c) & CredTech(c,X509) & 
                          ServPolicySO(sp,s,o) & CredAttr(c,a).        
    RevealACAttr(sp,a,e) <- ? p : ServPolOutputP(sp,p) & ProfAttr(p,a,e).   
  } 
  
  // Determine the stored attributes based on the storage specifications in the
  // service policies
  //  (1)   : store attributes that are specified in the service policy
  //  (2)   : store all revealed attributes in case of no storage trust
  {
    StoreAttr(sp,a,e) <- HasStorageTrust(sp) & ServPolStore(sp,a,e).
    StoreAttr(sp,a,e) <- ~HasStorageTrust(sp) & RevealACAttr(sp,a,e).    
  }
  
  // Determine the forwarded attributes based on the distribution section in the
  // service policies
  //  (1)   : Forward specified attributes
  //  (2)   : Forward all revealed attributes in case of no distribution trust
  {
    DistAttr(sp0,spIn,a,e) <- ? sp fwIn : HasDistributionTrust(spIn) &                            
                              InfoFlowTo(sp0,spIn) &
                              ServPolDistFromTo(fwIn,spIn,sp) &
                              ServPolDistFwAttr(fwIn,a,e).
                           
    DistAttr(sp0,spIn,a,e) <- ~HasDistributionTrust(spIn) &                            
                              InfoFlowTo(sp0,spIn) &                           
                              RevealACAttr(spIn,a,e).
  }
  
  // Determine the destination service policies related to distribution policies
  //  (1)   : initial step : forward attributes from the input service policy 
  //                         to the next service policy in the info-flow.  
  //  (2)   : inductive step : terminate forwarding when attributes are
  //                           forwarded by an info-flow successor of the
  //                           destination service policy.
  {
    DistFromTo(sp0,spIn,sp1) <- InfoFlowNext(sp0,spIn,sp1).    
                                
    DistFromTo(sp0,spIn,sp2) <- ? sp1 :
                                ~HasDistributionTrust(sp1) &
                                InfoFlowTo(sp0,spIn) & InfoFlowTo(sp0,sp1) &
                                ~InfoFlowSeq(sp0,sp1,spIn) &
                                InfoFlowNext(sp0,sp1,sp2) &
                                DistFromTo(sp0,spIn,sp1).
  } 
  
  // Determine the revealed attributes that are specified in the distribution
  // section of the service policies
  {                                   
    RevealDistAttr(sp0,sp,a,e) <- ? spIn : DistFromTo(sp0,spIn,sp) & 
                                    DistAttr(sp0,spIn,a,e).
  }
  
  
  // Determine the attributes that are stored by each organization for each 
  // info-flow
  //  (1)   : attributes determined by access control polcies
  //  (2)   : attributes determined by distribution policies
  {
    InfoFlowStoreAttr(sp0,o,a,e) <- ? sp s : InfoFlowTo(sp0,sp) & 
                                    StoreAttr(sp,a,e) & 
                                    ServPolicySO(sp,s,o).
                                
    InfoFlowStoreAttr(sp0,o,a,e) <- ? sp s : ~HasStorageTrust(sp) & 
                                    RevealDistAttr(sp0,sp,a,e) &
                                    ServPolicySO(sp,s,o).
  }
  
  // Determine the identifiers that are associated with the stored attributes
  // for each info-flow
  //  (1)   : pseudonyms
  //  (2)   : identities
  {
    InfoFlowStoreId(sp0,o,n) <- ? a e : PseudoSet(n) & 
                                InfoFlowStoreAttr(sp0,o,a,e) &
                                ~(? a0 : PseudoSetAttr(n,a0) &
                                ~(? e0 : InfoFlowStoreAttr(sp0,o,a0,e0))).
    InfoFlowStoreId(sp0,o,i) <- ? a e : IdentSet(i) & 
                                InfoFlowStoreAttr(sp0,o,a,e) &
                                ~(? a0 : IdentSetAttr(i,a0) &
                                ~(? e0 : InfoFlowStoreAttr(sp0,o,a0,e0))).
  }
  
  // Determine the attributes that are stored by each organization for each 
  // info-flow that is part of the history of the refered service policy
  {    
    HistoryStoreAttr(sp0,spH,o,a,e) <- HistorySP(sp0,spH) & 
                                       InfoFlowStoreAttr(spH,o,a,e).    
  } 
   
  // Determine the profile of a service policy's history
  //  (1)   : initial step : store attributes of the info-flows
  //  (2)   : inductive step : find new created pseudonyms
  //  (3)   : inductive step : find new created identities
  {
    ProfileHistory(sp0,o,id,a,e) <- ? spH : 
                                    HistoryStoreAttr(sp0,spH,o,a,e) & 
                                    InfoFlowStoreId(spH,o,id).                       
                                    
    ProfileHistory(sp0,o,n,a,e) <- ? id0 : PseudoSet(n) & 
                                   ProfileHistory(sp0,o,id0,a,e) &
                                   ~(? a0 : PseudoSetAttr(n,a0) &
                                   ~(? e0 : ProfileHistory(sp0,o,id0,a0,e0))).
                                   
    ProfileHistory(sp0,o,i,a,e) <- ? id0 : IdentSet(i) &
                                   ProfileHistory(sp0,o,id0,a,e) &
                                   ~(? a0 : IdentSetAttr(i,a0) &
                                   ~(? e0 : ProfileHistory(sp0,o,id0,a0,e0))).
  }

  // Determine the profile of info-flow of a service policy
  {
    ProfileInfoFlow(sp0,o,id,a,e) <- InfoFlowStoreAttr(sp0,o,a,e) &
                                     InfoFlowStoreId(sp0,o,id).
  }
  
  // Determine the impact of a service.  Therefore profile of the info-flow
  // of the corresponding service policy is applied to the history of that
  // service policy.
  //  (1)   : initial step : add the profile of the info-flow
  //  (2)   : inductive step : merge profiles in the history if they share a
  //                           common identifier
  //  (3)   : inductive step : find new created pseudonyms
  //  (4)   : inductive step : find new created identities
  {
    ProfileService(sp0,o,id,a,e) <- ProfileInfoFlow(sp0,o,id,a,e).
    
    ProfileService(sp0,o,id,a,e) <- ? a0 e0 : 
                                    ProfileService(sp0,o,id,a0,e0) & 
                                    ProfileHistory(sp0,o,id,a,e).
    
    ProfileService(sp0,o,n,a,e) <- ? id0 : PseudoSet(n) &
                                   ProfileService(sp0,o,id0,a,e) &
                                   ~(? a0 : PseudoSetAttr(n,a0) &
                                   ~(? e0 : ProfileService(sp0,o,id0,a0,e0))).
                                   
    ProfileService(sp0,o,i,a,e) <- ? id0 : IdentSet(i) &
                                   ProfileService(sp0,o,id0,a,e) &
                                   ~(? a0 : IdentSetAttr(i,a0) &
                                   ~(? e0 : ProfileService(sp0,o,id0,a0,e0))).
  }
  
  // Determine the post-merged profiles maintained by an organization for a
  // selected service profile
  //  (1)   : initial step : all the profiles for the selected service
  //  (2)   : inductive step : all profiles of complementary service profiles
  //  (3)   : inductive step : evaluate for newly created pseudonyms
  //  (4)   : inductive step : evaluate for newly created identities
  {
    MergedProfilesOrg(sp0,o,id,a,e) <- ProfileService(sp0,o,id,a,e).
    
    MergedProfilesOrg(sp0,o,id,a,e) <- ? spc a1 e1 : InfoFlowCompl(sp0,spc) &
                                       ProfileService(spc,o,id,a,e) & 
                                       MergedProfilesOrg(sp0,o,id,a1,e1).
                                       
    MergedProfilesOrg(sp0,o,n,a,e) <- ? id0 : PseudoSet(n) &
                                MergedProfilesOrg(sp0,o,id0,a,e) &
                                ~(? a0 : PseudoSetAttr(n,a0) &
                                ~(? e0 : MergedProfilesOrg(sp0,o,id0,a0,e0))).
                                   
    MergedProfilesOrg(sp0,o,i,a,e) <- ? id0 : IdentSet(i) &
                                MergedProfilesOrg(sp0,o,id0,a,e) &
                                ~(? a0 : IdentSetAttr(i,a0) &
                                ~(? e0 : MergedProfilesOrg(sp0,o,id0,a0,e0))).                                        
  }
  